package com.topview.blc;

import com.topview.entity.struct.DataStruct.Activity;
import com.topview.entity.struct.DataStruct.Pool;
import com.topview.entity.struct.DataStruct.TraceStruct;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import lombok.Getter;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.CallCallback;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

/**
 * pool logic
 *
 * @author 刘家辉
 * @date 2024/03/08
 */
@SuppressWarnings("unchecked")
public class PoolLogic extends Contract {
    public static final String NAME = "PoolLogic:";
    public static final String[] BINARY_ARRAY = {
        "60806040526000600160146101000a81548160ff0219169083151502179055506000600160156101000a81548160ff0219169083151502179055503480156200004757600080fd5b50604051620049ff380380620049ff83398181016040528101906200006d91906200010d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200019c565b600081519050620001078162000182565b92915050565b600080604083850312156200012157600080fd5b60006200013185828601620000f6565b92505060206200014485828601620000f6565b9150509250929050565b60006200015b8262000162565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200018d816200014e565b81146200019957600080fd5b50565b61485380620001ac6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063adda6b1e11610066578063adda6b1e14610170578063ba47bc06146101a1578063cf424209146101d6578063f00388f714610206578063f90c2da8146102225761009e565b80633c14d812146100a357806383197ef0146100d4578063a0712d68146100de578063a5b5d6481461010f578063a69439291461013f575b600080fd5b6100bd60048036038101906100b89190613567565b610253565b6040516100cb9291906143b8565b60405180910390f35b6100dc610451565b005b6100f860048036038101906100f3919061377b565b6107f4565b6040516101069291906143b8565b60405180910390f35b61012960048036038101906101249190613490565b611379565b60405161013691906142c1565b60405180910390f35b61015960048036038101906101549190613344565b611787565b6040516101679291906140db565b60405180910390f35b61018a6004803603810190610185919061377b565b611ab3565b6040516101989291906143b8565b60405180910390f35b6101bb60048036038101906101b6919061377b565b611b6a565b6040516101cd9695949392919061406c565b60405180910390f35b6101f060048036038101906101eb91906135d3565b611e3e565b6040516101fd91906142c1565b60405180910390f35b610220600480360381019061021b9190613398565b6124c1565b005b61023c600480360381019061023791906137cd565b6129d0565b60405161024a9291906143b8565b60405180910390f35b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b81526004016102b19190613fba565b60206040518083038186803b1580156102c957600080fd5b505afa1580156102dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103019190613415565b610340576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610337906141a1565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343428308856040518263ffffffff1660e01b815260040161039a919061414f565b60206040518083038186803b1580156103b257600080fd5b505afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea9190613415565b1561042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190614221565b60405180910390fd5b61044261043d8585600160006001611e3e565b6107f4565b80925081935050509250929050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316d6b5f66040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b857600080fd5b505afa1580156104cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f0919061343e565b73ffffffffffffffffffffffffffffffffffffffff1663a1f0c941336040518263ffffffff1660e01b81526004016105289190613fba565b60206040518083038186803b15801561054057600080fd5b505afa158015610554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190613415565b6105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae906141c1565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316d6b5f66040518163ffffffff1660e01b815260040160206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610656919061343e565b73ffffffffffffffffffffffffffffffffffffffff1663fd945a6b306040518263ffffffff1660e01b815260040161068e9190613f9f565b600060405180830381600087803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166316d6b5f66040518163ffffffff1660e01b815260040160206040518083038186803b15801561072757600080fd5b505afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f919061343e565b73ffffffffffffffffffffffffffffffffffffffff16636e9960c36040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a457600080fd5b505afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc919061331b565b73ffffffffffffffffffffffffffffffffffffffff16ff5b600080600160159054906101000a900460ff1615610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083e906142a1565b60405180910390fd5b60018060156101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b81526004016108bc9190613fba565b60206040518083038186803b1580156108d457600080fd5b505afa1580156108e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090c9190613415565b61094b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610942906141a1565b60405180910390fd5b610953612cea565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336dd21db856040518263ffffffff1660e01b81526004016109ad91906142c1565b60006040518083038186803b1580156109c557600080fd5b505afa1580156109d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a02919061373a565b90506000816080015111610a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a42906141e1565b60405180910390fd5b8060a001516000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663628dd72e33876040518363ffffffff1660e01b8152600401610aac92919061400c565b60206040518083038186803b158015610ac457600080fd5b505afa158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc91906137a4565b10610b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3390614201565b60405180910390fd5b8060400151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347734892336040518263ffffffff1660e01b8152600401610b9c9190613fba565b60206040518083038186803b158015610bb457600080fd5b505afa158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec91906137a4565b1015610c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2490614281565b60405180910390fd5b610c3684611ab3565b8093508194505050610c46612d45565b60405180608001604052808481526020014281526020018681526020016001846080015185606001510301815250905060016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f77d365f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cdf57600080fd5b505afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1791906137a4565b0193506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd051074856040518263ffffffff1660e01b8152600401610d7491906142c1565b600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329281b8b85836040518363ffffffff1660e01b8152600401610e02929190614411565b600060405180830381600087803b158015610e1c57600080fd5b505af1158015610e30573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffff", "", "90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e87906142a1565b60405180910390fd5b60018060146101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b8152600401611f059190613fba565b60206040518083038186803b158015611f1d57600080fd5b505afa158015611f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f559190613415565b611f94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8b906141a1565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343428308876040518263ffffffff1660e01b8152600401611fee919061414f565b60206040518083038186803b15801561200657600080fd5b505afa15801561201a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203e9190613415565b1561207e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207590614221565b60405180910390fd5b612086612cea565b6040518061010001604052808881526020018781526020018581526020018481526020018481526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020014281525090506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f6834d98860016040518363ffffffff1660e01b8152600401612135929190614171565b600060405180830381600087803b15801561214f57600080fd5b505af1158015612163573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166385caaedb60016000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ab4ba426040518163ffffffff1660e01b815260040160206040518083038186803b15801561220d57600080fd5b505afa158015612221573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224591906137a4565b016040518263ffffffff1660e01b815260040161226291906142c1565b600060405180830381600087803b15801561227c57600080fd5b505af1158015612290573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ab4ba426040518163ffffffff1660e01b815260040160206040518083038186803b1580156122fb57600080fd5b505afa15801561230f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233391906137a4565b91506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372264b0b83836040518363ffffffff1660e01b815260040161239192919061443a565b600060405180830381600087803b1580156123ab57600080fd5b505af11580156123bf573d6000803e3d6000fd5b505050507fbf20436316cc79934dce218cc513515db230945d56ada2d7f6206efa3fdb9d456000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ab4ba426040518163ffffffff1660e01b815260040160206040518083038186803b15801561244b57600080fd5b505afa15801561245f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248391906137a4565b33836040516124949392919061437a565b60405180910390a1506000600160146101000a81548160ff02191690831515021790555095945050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b815260040161251c9190613fba565b60206040518083038186803b15801561253457600080fd5b505afa158015612548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256c9190613415565b6125ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a2906141a1565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385836040518263ffffffff1660e01b81526004016126069190613f9f565b60206040518083038186803b15801561261e57600080fd5b505afa158015612632573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126569190613415565b612695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268c906141a1565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d08df81836040518263ffffffff1660e01b815260040161270691906142c1565b60206040518083038186803b15801561271e57600080fd5b505afa158015612732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612756919061331b565b73ffffffffffffffffffffffffffffffffffffffff16146127ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a390614261565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b645ff182846040518363ffffffff1660e01b81526004016128089291906142dc565b600060405180830381600087803b15801561282257600080fd5b505af1158015612836573d6000803e3d6000fd5b5050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166360c9616e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128a357600080fd5b505afa1580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190613467565b90508073ffffffffffffffffffffffffffffffffffffffff1663ec22e7c38360405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020014281526020016040518060400160405280600c81526020017fe8978fe59381e8bdace8b5a000000000000000000000000000000000000000008152508152506040518363ffffffff1660e01b815260040161299992919061446a565b600060405180830381600087803b1580156129b357600080fd5b505af11580156129c7573d6000803e3d6000fd5b50505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663410e9385336040518263ffffffff1660e01b8152600401612a2e9190613fba565b60206040518083038186803b158015612a4657600080fd5b505afa158015612a5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7e9190613415565b612abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ab4906141a1565b60405180910390fd5b612ac5612d70565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663206770d7866040518263ffffffff1660e01b8152600401612b1f91906142c1565b60006040518083038186803b158015612b3757600080fd5b505afa158015612b4b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612b74919061367a565b509050806020015180519060200120848051906020012014612bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc290614241565b60405180910390fd5b612bd881604001516107f4565b8093508194505050509250929050565b6000612bf2612cea565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336dd21db846040518263ffffffff1660e01b8152600401612c4c91906142c1565b60006040518083038186803b158015612c6457600080fd5b505afa158015612c78573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612ca1919061373a565b9050338160000151826020015183608001518460c00151604051602001612ccc959493929190613f48565b60405160208183030381529060405280519060200120915050919050565b604051806101000160405280606081526020016060815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040518060800160405280600080191681526020016000815260200160008152602001600081525090565b60405180606001604052806060815260200160608152602001600081525090565b600081359050612da081614793565b92915050565b600081519050612db581614793565b92915050565b600082601f830112612dcc57600080fd5b8135612ddf612dda826144c7565b61449a565b91508181835260208401935060208101905083856020840282011115612e0457600080fd5b60005b83811015612e345781612e1a8882612ec7565b845260208401935060208301925050600181019050612e07565b5050505092915050565b600082601f830112612e4f57600080fd5b8151612e", "", "6000830151613e656000860182613873565b506020830151613e786020860182613873565b506040830151613e8b6040860182613f13565b5060608301518482036060860152613ea382826139e1565b9150508091505092915050565b6000608083016000830151613ec86000860182613873565b506020830151613edb6020860182613873565b506040830151613eee6040860182613f13565b5060608301518482036060860152613f0682826139e1565b9150508091505092915050565b613f1c816146b3565b82525050565b613f2b816146b3565b82525050565b613f42613f3d826146b3565b61476b565b82525050565b6000613f54828861385c565b601482019150613f648287613a53565b9150613f708286613a53565b9150613f7c8285613f31565b602082019150613f8c8284613891565b6014820191508190509695505050505050565b6000602082019050613fb46000830184613882565b92915050565b6000602082019050613fcf600083018461384d565b92915050565b6000606082019050613fea600083018661384d565b613ff76020830185613882565b6140046040830184613f22565b949350505050565b6000604082019050614021600083018561384d565b61402e6020830184613f22565b9392505050565b600060608201905061404a600083018661384d565b6140576020830185613f22565b6140646040830184613f22565b949350505050565b600060c082019050818103600083015261408681896138a8565b90506140956020830188613999565b6140a26040830187613882565b6140af6060830186613882565b81810360808301526140c18185613a1a565b90506140d060a0830184613f22565b979650505050505050565b60006040820190506140f0600083018561397b565b8181036020830152614102818461391d565b90509392505050565b60006020820190506141206000830184613999565b92915050565b600060408201905061413b6000830185613999565b6141486020830184613f22565b9392505050565b600060208201905081810360008301526141698184613a1a565b905092915050565b6000604082019050818103600083015261418b8185613a1a565b905061419a602083018461397b565b9392505050565b600060208201905081810360008301526141ba81613a84565b9050919050565b600060208201905081810360008301526141da81613ac4565b9050919050565b600060208201905081810360008301526141fa81613b04565b9050919050565b6000602082019050818103600083015261421a81613b44565b9050919050565b6000602082019050818103600083015261423a81613b84565b9050919050565b6000602082019050818103600083015261425a81613bc4565b9050919050565b6000602082019050818103600083015261427a81613c2a565b9050919050565b6000602082019050818103600083015261429a81613c6a565b9050919050565b600060208201905081810360008301526142ba81613caa565b9050919050565b60006020820190506142d66000830184613f22565b92915050565b60006040820190506142f16000830185613f22565b6142fe6020830184613882565b9392505050565b600060408201905061431a6000830185613f22565b614327602083018461384d565b9392505050565b60006080820190506143436000830187613f22565b614350602083018661384d565b81810360408301526143628185613cea565b90506143716060830184613f22565b95945050505050565b600060608201905061438f6000830186613f22565b61439c602083018561384d565b81810360408301526143ae8184613d96565b9050949350505050565b60006040820190506143cd6000830185613f22565b6143da6020830184613999565b9392505050565b60006040820190506143f66000830185613f22565b81810360208301526144088184613cea565b90509392505050565b600060a0820190506144266000830185613f22565b6144336020830184613d41565b9392505050565b600060408201905061444f6000830185613f22565b81810360208301526144618184613d96565b90509392505050565b600060408201905061447f6000830185613f22565b81810360208301526144918184613eb0565b90509392505050565b6000604051905081810181811067ffffffffffffffff821117156144bd57600080fd5b8060405250919050565b600067ffffffffffffffff8211156144de57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561450657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561452e57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561455a57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061464082614693565b9050919050565b600061465282614693565b9050919050565b60008115159050919050565b6000819050919050565b600061467a82614635565b9050919050565b600061468c82614635565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006146c8826146cf565b9050919050565b60006146da826146e1565b9050919050565b60006146ec82614693565b9050919050565b82818337600083830152505050565b60005b83811015614720578082015181840152602081019050614705565b8381111561472f576000848401525b50505050565b600061474082614759565b9050919050565b600061475282614759565b9050919050565b600061476482614786565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b61479c81614635565b81146147a757600080fd5b50565b6147b381614659565b81146147be57600080fd5b50565b6147ca81614665565b81146147d557600080fd5b50565b6147e18161466f565b81146147ec57600080fd5b50565b6147f881614681565b811461480357600080fd5b50565b61480f816146b3565b811461481a57600080fd5b5056fea2646970667358221220b31c6c073a805f21ed5d66956092a488c46f6c15941c8b2b2aa2cf3887fa7eee64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userLogicAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataStructs.Activity\",\"name\":\"activity\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCreateActivity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"left\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataStructs.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"LogCreatePool\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"beforeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"collectionHash\",\"type\":\"bytes32[]\"}],\"name\":\"checkDcAndReturnTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_encodedKey\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_DcName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activityId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_activityId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_encodedKey\",\"type\":\"bytes\"}],\"name\":\"getDcFromActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcId\",\"type\":\"uint256\"}],\"name\":\"getDcHistoryAndMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"operateTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"operateRecord\",\"type\":\"string\"}],\"internalType\":\"struct Trace.TraceStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dcId\",\"type\":\"uint256\"}],\"name\":\"give\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"mintNotForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    @Getter public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BEFOREMINT = "beforeMint";

    public static final String FUNC_CHECKDCANDRETURNTIME = "checkDcAndReturnTime";

    public static final String FUNC_CREATEACTIVITY = "createActivity";

    public static final String FUNC_CREATEPOOL = "createPool";

    public static final String FUNC_DESTROY = "destroy";

    public static final String FUNC_GETDCFROMACTIVITY = "getDcFromActivity";

    public static final String FUNC_GETDCHISTORYANDMESSAGE = "getDcHistoryAndMessage";

    public static final String FUNC_GIVE = "give";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTNOTFORSALE = "mintNotForSale";

    public static final Event LOGCREATEACTIVITY_EVENT = new Event("LogCreateActivity",
        Arrays.asList(new TypeReference<Uint256>() {
        }, new TypeReference<Address>() {
        }, new TypeReference<Activity>() {
        }, new TypeReference<Uint256>() {
        }));

    public static final Event LOGCREATEPOOL_EVENT = new Event("LogCreatePool",
        Arrays.asList(new TypeReference<Uint256>() {
        }, new TypeReference<Address>() {
        }, new TypeReference<Pool>() {
        }));

    protected PoolLogic(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static PoolLogic load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new PoolLogic(contractAddress, client, credential);
    }

    public static PoolLogic deploy(Client client, CryptoKeyPair credential, String _poolDataAddress,
        String _userLogicAddress) throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_poolDataAddress),
            new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_userLogicAddress)));
        return deploy(PoolLogic.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public List<LogCreateActivityEventResponse> getLogCreateActivityEvents(
        TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGCREATEACTIVITY_EVENT, transactionReceipt);
        ArrayList<LogCreateActivityEventResponse> responses = new ArrayList<>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogCreateActivityEventResponse typedResponse = new LogCreateActivityEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.activityId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.activity = (Activity) eventValues.getNonIndexedValues().get(2);
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<LogCreatePoolEventResponse> getLogCreatePoolEvents(
        TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGCREATEPOOL_EVENT, transactionReceipt);
        ArrayList<LogCreatePoolEventResponse> responses = new ArrayList<>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogCreatePoolEventResponse typedResponse = new LogCreatePoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.poolId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.pool = (Pool) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Tuple2<BigInteger, byte[]> beforeMint(BigInteger _poolId) throws ContractException {
        final Function function = new Function(FUNC_BEFOREMINT,
            List.of(new Uint256(_poolId)),
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<>(
            (BigInteger) results.get(0).getValue(),
            (byte[]) results.get(1).getValue());
    }

    public void beforeMint(BigInteger _poolId, CallCallback callback) {
        final Function function = new Function(FUNC_BEFOREMINT,
            List.of(new Uint256(_poolId)),
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        asyncExecuteCall(function, callback);
    }

    public Tuple2<Boolean, List<BigInteger>> checkDcAndReturnTime(String owner,
        List<byte[]> collectionHash) throws ContractException {
        final Function function = new Function(FUNC_CHECKDCANDRETURNTIME,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(owner),
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<>(
                    org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32.class,
                    org.fisco.bcos.sdk.v3.codec.Utils.typeMap(collectionHash, org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32.class))),
            Arrays.asList(new TypeReference<Bool>() {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<>(
            (Boolean) results.get(0).getValue(),
            convertToNative((List<Uint256>) results.get(1).getValue()));
    }

    public void checkDcAndReturnTime(String owner, List<byte[]> collectionHash,
        CallCallback callback) {
        final Function function = new Function(FUNC_CHECKDCANDRETURNTIME,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(owner),
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<>(
                    org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32.class,
                    org.fisco.bcos.sdk.v3.codec.Utils.typeMap(collectionHash, org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32.class))),
            Arrays.asList(new TypeReference<Bool>() {
            }, new TypeReference<DynamicArray<Uint256>>() {
            }));
        asyncExecuteCall(function, callback);
    }

    public TransactionReceipt createActivity(String _name, byte[] _encodedKey, String _cid,
        String _DcName, BigInteger _amount) {
        final Function function = new Function(
            FUNC_CREATEACTIVITY,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_encodedKey),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_cid),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_DcName),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_amount)),
            Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForCreateActivity(String _name, byte[] _encodedKey,
        String _cid, String _DcName, BigInteger _amount) {
        final Function function = new Function(
            FUNC_CREATEACTIVITY,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_encodedKey),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_cid),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_DcName),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_amount)),
            Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String createActivity(String _name, byte[] _encodedKey, String _cid, String _DcName,
        BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_CREATEACTIVITY,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_encodedKey),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_cid),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_DcName),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_amount)),
            Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, byte[], String, String, BigInteger> getCreateActivityInput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEACTIVITY,
            List.of(),
            Arrays.asList(new TypeReference<Utf8String>() {
            }, new TypeReference<DynamicBytes>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<>(

            (String) results.get(0).getValue(),
            (byte[]) results.get(1).getValue(),
            (String) results.get(2).getValue(),
            (String) results.get(3).getValue(),
            (BigInteger) results.get(4).getValue()
        );
    }

    public Tuple1<BigInteger> getCreateActivityOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEACTIVITY,
            List.of(),
            List.of(new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>(

            (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt createPool(String _cid, String _name, BigInteger _limit,
        BigInteger _price, BigInteger _amount) {
        final Function function = new Function(
            FUNC_CREATEPOOL,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_cid),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_limit),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_price),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_amount)),
            Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForCreatePool(String _cid, String _name, BigInteger _limit,
        BigInteger _price, BigInteger _amount) {
        final Function function = new Function(
            FUNC_CREATEPOOL,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_cid),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_limit),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_price),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_amount)),
            Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String createPool(String _cid, String _name, BigInteger _limit, BigInteger _price,
        BigInteger _amount, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_CREATEPOOL,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_cid),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_limit),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_price),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_amount)),
            Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> getCreatePoolInput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPOOL,
            List.of(),
            Arrays.asList(new TypeReference<Utf8String>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<>(

            (String) results.get(0).getValue(),
            (String) results.get(1).getValue(),
            (BigInteger) results.get(2).getValue(),
            (BigInteger) results.get(3).getValue(),
            (BigInteger) results.get(4).getValue()
        );
    }

    public Tuple1<BigInteger> getCreatePoolOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPOOL,
            List.of(),
            List.of(new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>(

            (BigInteger) results.get(0).getValue()
        );
    }

    public TransactionReceipt destroy() {
        final Function function = new Function(
            FUNC_DESTROY,
            List.of(),
            Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForDestroy() {
        final Function function = new Function(
            FUNC_DESTROY,
            List.of(),
            Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String destroy(TransactionCallback callback) {
        final Function function = new Function(
            FUNC_DESTROY,
            List.of(),
            Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public TransactionReceipt getDcFromActivity(BigInteger _activityId, byte[] _encodedKey) {
        final Function function = new Function(
            FUNC_GETDCFROMACTIVITY,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_activityId),
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_encodedKey)),
            Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGetDcFromActivity(BigInteger _activityId,
        byte[] _encodedKey) {
        final Function function = new Function(
            FUNC_GETDCFROMACTIVITY,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_activityId),
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_encodedKey)),
            Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String getDcFromActivity(BigInteger _activityId, byte[] _encodedKey,
        TransactionCallback callback) {
        final Function function = new Function(
            FUNC_GETDCFROMACTIVITY,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_activityId),
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(_encodedKey)),
            Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<BigInteger, byte[]> getGetDcFromActivityInput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETDCFROMACTIVITY,
            List.of(),
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<DynamicBytes>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

            (BigInteger) results.get(0).getValue(),
            (byte[]) results.get(1).getValue()
        );
    }

    public Tuple2<BigInteger, byte[]> getGetDcFromActivityOutput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETDCFROMACTIVITY,
            List.of(),
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

            (BigInteger) results.get(0).getValue(),
            (byte[]) results.get(1).getValue()
        );
    }

    public Tuple6<DynamicArray<TraceStruct>, byte[], String, String, String, BigInteger> getDcHistoryAndMessage(
        BigInteger _dcId) throws ContractException {
        final Function function = new Function(FUNC_GETDCHISTORYANDMESSAGE,
            List.of(new Uint256(_dcId)),
            Arrays.asList(new TypeReference<DynamicArray<TraceStruct>>() {
            }, new TypeReference<Bytes32>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<>(
            new DynamicArray<>(TraceStruct.class, (List<TraceStruct>) results.get(0).getValue()),
            (byte[]) results.get(1).getValue(),
            (String) results.get(2).getValue(),
            (String) results.get(3).getValue(),
            (String) results.get(4).getValue(),
            (BigInteger) results.get(5).getValue());
    }

    public void getDcHistoryAndMessage(BigInteger _dcId, CallCallback callback) {
        final Function function = new Function(FUNC_GETDCHISTORYANDMESSAGE,
            List.of(new Uint256(_dcId)),
            Arrays.asList(new TypeReference<DynamicArray<TraceStruct>>() {
            }, new TypeReference<Bytes32>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Uint256>() {
            }));
        asyncExecuteCall(function, callback);
    }

    public TransactionReceipt give(String _to, BigInteger _dcId) {
        final Function function = new Function(
            FUNC_GIVE,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_to),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_dcId)),
            Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForGive(String _to, BigInteger _dcId) {
        final Function function = new Function(
            FUNC_GIVE,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_to),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_dcId)),
            Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String give(String _to, BigInteger _dcId, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_GIVE,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(_to),
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(_dcId)),
            Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, BigInteger> getGiveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GIVE,
            List.of(),
            Arrays.asList(new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

            (String) results.get(0).getValue(),
            (BigInteger) results.get(1).getValue()
        );
    }

    public TransactionReceipt mint(BigInteger _poolId) {
        final Function function = new Function(
            FUNC_MINT,
            List.of(new Uint256(_poolId)),
            Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForMint(BigInteger _poolId) {
        final Function function = new Function(
            FUNC_MINT,
            List.of(new Uint256(_poolId)),
            Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String mint(BigInteger _poolId, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_MINT,
            List.of(new Uint256(_poolId)),
            Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getMintInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MINT,
            List.of(),
            List.of(new TypeReference<Uint256>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>(

            (BigInteger) results.get(0).getValue()
        );
    }

    public Tuple2<BigInteger, byte[]> getMintOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MINT,
            List.of(),
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

            (BigInteger) results.get(0).getValue(),
            (byte[]) results.get(1).getValue()
        );
    }

    public TransactionReceipt mintNotForSale(String _cid, String _name) {
        final Function function = new Function(
            FUNC_MINTNOTFORSALE,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_cid),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name)),
            Collections.emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForMintNotForSale(String _cid, String _name) {
        final Function function = new Function(
            FUNC_MINTNOTFORSALE,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_cid),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name)),
            Collections.emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String mintNotForSale(String _cid, String _name, TransactionCallback callback) {
        final Function function = new Function(
            FUNC_MINTNOTFORSALE,
            Arrays.asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_cid),
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(_name)),
            Collections.emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getMintNotForSaleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MINTNOTFORSALE,
            List.of(),
            Arrays.asList(new TypeReference<Utf8String>() {
            }, new TypeReference<Utf8String>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

            (String) results.get(0).getValue(),
            (String) results.get(1).getValue()
        );
    }

    public Tuple2<BigInteger, byte[]> getMintNotForSaleOutput(
        TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MINTNOTFORSALE,
            List.of(),
            Arrays.asList(new TypeReference<Uint256>() {
            }, new TypeReference<Bytes32>() {
            }));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<>(

            (BigInteger) results.get(0).getValue(),
            (byte[]) results.get(1).getValue()
        );
    }

    public static class LogCreateActivityEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger activityId;

        public String operator;

        public Activity activity;

        public BigInteger amount;
    }

    public static class LogCreatePoolEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger poolId;

        public String operator;

        public Pool pool;
    }
}
